<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Suns</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 30 Jan 2023 18:27:05 +0900</pubDate>
    <lastBuildDate>Mon, 30 Jan 2023 18:27:05 +0900</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>[Java/자바] 입출력을 위한 스트림(Stream)</title>
        <description>&lt;h1 id=&quot;stream&quot;&gt;Stream&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터를 전달하기 위해 사용되는 연결통로&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;입력과 출력을 I/O (Input/Output) 라고 부른다. 그래서 각 언어마다 입출력을 위한 라이브러리에는 io 라는 단어가 사용된다. c언어의 stdio.h 와 java의 java.io 가 예시이다. 사용자가 데이터를 입력하면 이 데이터를 전송하여 출력을 하는데, 이 사이에서 매개체로 이루어지는 것이 스트림이다. &lt;br /&gt;&lt;br /&gt;
스트림은 단방향 통신만 가능해 입력과 출력을 동시에 진행할 수 없다. 동시에 하기 위해 입력스트림과 출력스트림 2개가 필요하다. 스트림은 먼저 보낸 데이터를 우선으로 연속적으로 데이터를 주고 받는다. 선입선출(First in First Out : FIFO)의 큐(Queue)와 같은 구조로 이루어졌다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
스트림은 바이트 기반으로 이루어져있다. 바이트 기반으로 이루어졌다는 건 데이터 입출력 단위가 1byte 라는 것이다. 입출력을 진행하는 대상의 종류에 따라서 스트림을 골라 사용할 수 있으며 모두 InputStream과 OutputStream을 기반으로 하는 자식이다. &lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;
c언어에서 char는 1byte의 크기를 가지고 있다. 하지만 자바에서 char는 2byte 크기를 가지고 있어, 1byte로 입출력이 진행되는 바이트기반 스트림으로 문자를 처리할 수 없다. 이를 위해 문자기반 스트림이 제공된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputStream → Reader&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutputStream → Writer&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
입력스트림은 Reader로, 출력스트림은 Writer로 사용된다. 각 대상별로 사용할 수 있는 바이트기반 스트림과 문자기반 스트림은 아래 표와 같다.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;../../assets/img/Java/stream.png&quot; alt=&quot;image&quot; /&gt;StringBufferInputStream/OutputStream은 더 이상 사용 되지 않는다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
각 대상을 의미하는 이름 뒤에 스트림만 바꿔주면 된다. 바이트배열인 ByteArray 이름만 CharArray로 바꿔주면 모두 비슷한 이름으로 헷갈리지 않게 쓸 수 있다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
문자 데이터를 다루는데 필요한 또 하나의 정보는 인코딩이다. 여러 종류의 인코딩과 자바에서 사용하는 유니코드 간의 변환을 자동으로 처리해준다. Reader는 특정 인코딩을 읽어 유니코드로 변환, Writer는 유니코드를 특정 인코딩으로 변환하여 저장한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;실제 데이터를 주고 받아 입출력을 시행하지는 않지만, 스트림의 기능을 보완해주는 보조 스트림이 존재한다. 보조 스트림은 자체적으로 입출력을 할 수 없어 기반 스트림을 필요로 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-buffered&quot;&gt;1. Buffered&lt;/h2&gt;
&lt;h3 id=&quot;1-bufferedinputstream--bufferedoutputstream&quot;&gt;1) BufferedInputStream / BufferedOutputStream&lt;/h3&gt;
&lt;p&gt;스트림의 입출력 효율을 높이기 위해 사용한다. 버퍼를 이용해 여러 바이트를 입출력하는 것이 더 빠르고 효율적으로 사용할 수 있다. 버퍼는 임시적으로 데이터를 보관하는 임시 메모리로 사용된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;생성자
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; BufferedInputStream(InputStream in, int size), BufferedInputStream(InputStream in)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; BufferedOutputStream(OutputStream out, int size), BufferedOutputStream(OutputStream out)
　: 각각 InputStream을 입력소스로, OutputStream을 출력소스로
　  버퍼의 크기를 지정해주지 않으면 8192byte 크기로 생성된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;입력소스로 내용을 읽어 내부 버퍼에 저장하고, 버퍼에 저장된 데이터를 읽는다. 다음 버퍼를 읽기 위해 read메서드가 호출되면 다시 버퍼 크기만큼 데이터를 읽어 버퍼에 저장한다. 출력소스는 wirte메서드를 이용한 출력이 버퍼에 저장되고, 버퍼가 가득 차면 출력소스를 출력한다. 버퍼에 데이터가 남아있는 채로 프로그램이 종료되는 것을 방지하여 출력 뒤에는 flush()와 close()를 호출해 버퍼를 깨끗하게 정리해줘야 한다.
&lt;br /&gt;
write(): 버퍼의 값을 전부 출력한다. / flush(): 남아있는 데이터를 모두 출력한다.
&lt;br /&gt;
보조 스트림을 사용한 경우 기반 스트림의 close()없이 보조 스트림의 close()만 호출해도 된다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-bufferedreader--bufferedwriter&quot;&gt;2) BufferedReader / BufferedWriter&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;바이트기반과 동일하게 버퍼를 사용해 효율을 높인다. 키보드 입력이 있을 때마다 버퍼로 전달하는 방법보다 버퍼가 차거나 개행 문자 입력 시 버퍼 내용을 프로그램에 한번에 전송해 많은 문자를 입력받을 시 확실히 효율적인 방법이다.&lt;br /&gt;&lt;br /&gt;
ButteredReader의 readLine()을 사용해 데이터를 라인단위로 읽고, BufferedWriter는 newLine()을 통해 줄바꿈을 할 수 있다.&lt;br /&gt;
&lt;br /&gt;
해당 스트림은 Enter만 인식하여 문자열로 고정하여 저장한다. 때문에 공백을 기준으로 데이터를 나누거나 형변환을 하고 싶은 경우 데이터 가공이 필요하다. 공백 단위로 나눌 경우 StringTokenizer의 nextToken() 메서드를 통해 분류해 순서대로 호출할 수 있으며, String.split()을 사용할 수도 있다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-inputstreamreader--outputstreamwriter&quot;&gt;2. InputStreamReader / OutputStreamWriter&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
바이트기반 스트림을 문자기반 스트림으로 연결해주는 역할을 한다. Reader와 Writer의 특징인 인코딩을 통해 바이트기반 스트림의 데이터를 지정된 인코딩의 문자데이터로 변환할 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;생성자
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; InputStreamReader(InputStream in) / InputStreamReader(InputStream in, String encoding)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; OutputStreamWriter(OutputStream out) / OutputStreamWriter(OutputStream out, String encoding)
　: 인코딩을 지정해주지 않으면 OS에서 사용하는 기본 인코딩 문자로 변환하는 스트림 생성
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;위 공부한 내용을 바탕으로 백준 15552번을 풀어볼 수 있다.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;../../assets/img/BOJ/15552_1.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;../../assets/img/BOJ/15552_2.png&quot; alt=&quot;image&quot; /&gt;
&lt;br /&gt;문제에 대한 설명부터 일반 입출력 연산이 아닌 더 빠른 연산을 사용하라고 설명되어 있다.&lt;br /&gt;
&lt;img src=&quot;../../assets/img/BOJ/15552_3.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
빠른 A+B는 입출력 단계가 아닌 반복문 단계에 포함되어 있다. 반복문을 이용하여 빠른 입출력을 진행하는 문제다. 입력받은 T만큼 반복하며 자바의 경우 BufferedReader와 BufferedWriter를 이용해 문자를 입력받아 연산 후 출력을 진행한다.&lt;/p&gt;

&lt;p&gt;BufferedReader는 버퍼를 이용하는 연산으로 “Enter”만 인식해 “문자”로 저장된다. 입력된 문자를 공백을 기준으로 나누기 위해 StringTokenizer를 이용했다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;간편하게 사용하고 싶으면 java.io.*; 만 해도 되지만, 어느 클래스를 가져왔는지 확실하게 알려주기 위해 직접 작성했다. BufferedReader의 readLine() 사용 시 예외처리가 필요해 IOException을 이용했다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;BufferedWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;\n&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
T만큼의 반복을 위해 int형으로 변환하여 반복을 진행했다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;입력받은 문자를 공백을 기준으로 토큰으로 분류하는 StringTokenizer클래스를 인스턴스한다. nextToken()메서드를 이용해 분류된 다음 토큰을 가져와 각 변수에 대입한다. 대입하기 전에 문자를 정수로 형변환을 진행해야 하며, 문자를 출력하는 BufferedWriter를 위해서 두 수의 합을 다시 문자로 변환하여 저장한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;두 수의 합을 위해서 정수로 형변환을 진행했고&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;문자의 출력을 위해서 문자로 형변환을 진행했다.&lt;/code&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;줄바꿈 문자를 넣어주지 않으면, 버퍼에 입력된 순서대로 출력만 진행이 되어 모든 문자들이 붙어서 출력된다. 이를 위해 제일 마지막에 \n을 함께 넣어주면 예제에 나오는 모습대로 출력이 되는 걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rvrlo.tistory.com/entry/Java%EC%9E%90%EB%B0%94-%EC%9E%85%EC%B6%9C%EB%A0%A5%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%8A%A4%ED%8A%B8%EB%A6%BCStream&quot;&gt;Tistory&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Jan 2023 06:00:00 +0900</pubDate>
        <link>http://localhost:4000/2023-01/Stream</link>
        <guid isPermaLink="true">http://localhost:4000/2023-01/Stream</guid>
        
        <category>Java</category>
        
        <category>io</category>
        
        <category>stream</category>
        
        
        <category>JAVA</category>
        
      </item>
    
      <item>
        <title>[Java/자바] Scanner를 이용해 입력받기</title>
        <description>&lt;h1 id=&quot;scanner&quot;&gt;Scanner&lt;/h1&gt;
&lt;p&gt;자바에서는 입력을 받기 위해 Scanner 클래스를 이용할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;util 패키지 안의 모든 클래스를 사용한다는 util.* 을 가져와도 되고,&lt;br /&gt;
Scanner 클래스를 사용한다고 직접적으로 알려주기 위해 util.Scanner 를 가져와도 된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Scanner 클래스의 객체를 생성하고 해당 객체를 사용하여 변수에 값을 입력받을 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//String ageInput = scanner.nextLine();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//int age = Integer.parseInt(ageInput);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
scanner 객체를 이용해 name과 age에 각 각 값을 입력하였다.&lt;br /&gt;
nextLine()은 입력대기 상태에서 엔터키를 누르면 입력한 내용이 문자열로 반환된다.&lt;/p&gt;

&lt;p&gt;Integer.parseInt() 메서드는 입력받은 문자열을 int타입으로 변환하여 할당시키는 역할을 한다.&lt;br /&gt;
nextInt() 메서드는 위와 같은 추가 연산 없이 입력받은 값을 바로 int형으로 변환시킬 수 있다.&lt;br /&gt;
하지만 연속적으로 값을 입력받기 까다로울 수 있으니 그럴 땐 문자열을 한번에 받아 형변환을 하는 방법을 선택할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;../../assets/img/BOJ/2588_1.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;../../assets/img/BOJ/2588_2.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;../../assets/img/BOJ/2588_3.png&quot; alt=&quot;image&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
두 수를 입력받아 나누기 연산을 통해 각 자릿수를 구했다.&lt;br /&gt;
그리고 곱하기를 통해 출력을 진행하였다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 29 Jan 2023 06:00:00 +0900</pubDate>
        <link>http://localhost:4000/2023-01/Scanner</link>
        <guid isPermaLink="true">http://localhost:4000/2023-01/Scanner</guid>
        
        <category>Java</category>
        
        <category>io</category>
        
        <category>scanner</category>
        
        
        <category>JAVA</category>
        
      </item>
    
  </channel>
</rss>